{
  "openapi": "3.1.0",
  "info": {
    "title": "GitHub File Proxy + Promote Patch Tool",
    "version": "1.2.0",
    "description": "Fetch GitHub repo files and generate patch metadata for AI-native delivery."
  },
  "servers": [
    {
      "url": "https://ai-delivery-framework-production.up.railway.app",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {}
  },
  "paths": {
    "/getFile": {
      "post": {
        "operationId": "getFile",
        "summary": "Fetch file from GitHub repo (optionally by branch or ref)",
        "tags": ["GitHub Files"],
        "x-gpt-action": {
          "name": "Fetch Single GitHub File",
          "instructions": "Use this to fetch a single file from a GitHub repo. Specify the repo name and file path."
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["repo_name", "path"],
                "properties": {
                  "repo_name": { "type": "string" },
                  "path": { "type": "string" },
                  "ref": {
                    "type": "string",
                    "description": "Optional Git ref (branch, tag, or commit SHA)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "GitHub file response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": { "type": "string" },
                    "sha": { "type": "string" },
                    "content": { "type": "string" },
                    "ref": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/batch-files": {
      "post": {
        "operationId": "getBatchFiles",
        "summary": "Fetch multiple GitHub files via body input",
        "tags": ["GitHub Files"],
        "x-gpt-action": {
          "name": "Fetch Multiple GitHub Files",
          "instructions": "Provide a list of file paths to fetch from the GitHub repo."
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["repo_name", "paths"],
                "properties": {
                  "repo_name": { "type": "string" },
                  "paths": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "ref": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": { "type": "string" },
                          "content": { "type": "string" },
                          "error": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/update_metadata": {
        "patch": {
          "operationId": "updateTaskMetadata",
          "summary": "Update metadata fields for a task",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Update Task Metadata",
            "instructions": "Use this to update specific metadata fields for a task."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "task_id"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "task_id": { "type": "string" },
                    "description": { "type": "string" },
                    "prompt": { "type": "string" },
                    "inputs": { "type": "array", "items": { "type": "string" } },
                    "outputs": { "type": "array", "items": { "type": "string" } },
                    "ready": { "type": "boolean" },
                    "done": { "type": "boolean" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Task metadata updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "task_id": { "type": "string" },
                      "updated_task_metadata": { "type": "object" }
                    }
                  }
                }
              }
            },
            "404": { "description": "Task not found" }
          }
        }
      },
      "/tasks/list": {
        "get": {
          "operationId": "listTasks",
          "summary": "List tasks from GitHub task.yaml",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "List All Tasks",
            "instructions": "Fetch all tasks from the task.yaml file in the GitHub repo."
          },
          "parameters": [
            { "name": "status", "in": "query", "required": false, "schema": { "type": "string" } },
            { "name": "pod_owner", "in": "query", "required": false, "schema": { "type": "string" } },
            { "name": "category", "in": "query", "required": false, "schema": { "type": "string" } }
          ],
          "responses": {
            "200": {
              "description": "List of tasks",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "tasks": {
                        "type": "object",
                        "additionalProperties": { "type": "object" }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Error fetching task.yaml"
            }
          }
        }
      },
      "/tasks/activate": {
        "post": {
          "operationId": "activateTask",
          "summary": "Activate one or more tasks by updating their status to planned",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Activate Tasks",
            "instructions": "Use this to activate tasks by updating their status to 'planned'."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "task_id"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "task_id": {
                      "oneOf": [
                        { "type": "string" },
                        { "type": "array", "items": { "type": "string" } }
                      ]
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Tasks successfully activated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "planned_tasks": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "task_id": { "type": "string" },
                            "pod_owner": { "type": "string" },
                            "metadata": { "type": "object" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/clone": {
        "post": {
          "operationId": "cloneTask",
          "summary": "Clone an existing task and generate a new task ID and metadata",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Clone Task",
            "instructions": "Use this to clone an existing task and generate a new task ID."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "original_task_id", "descriptor"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "original_task_id": { "type": "string" },
                    "descriptor": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Task cloned and new task ID generated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "new_task_id": { "type": "string" },
                      "cloned_task_metadata": { "type": "object" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/{task_id}": {
        "get": {
          "operationId": "getTaskDetails",
          "summary": "Return full metadata for a task",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Get Task Details",
            "instructions": "Call this to get the full metadata for a specific task."
          },
          "parameters": [
            {
              "name": "task_id",
              "in": "path",
              "required": true,
              "schema": { "type": "string" }
            }
          ],
          "responses": {
            "200": {
              "description": "Metadata for a single task",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "task_id": { "type": "string" },
                      "metadata": { "type": "object" }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Task not found"
            }
          }
        }
      },
      "/tasks/create": {
        "post": {
          "operationId": "createNewTask",
          "summary": "Create a new custom task from scratch",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Create New Task",
            "instructions": "Use this to create a new task with custom metadata."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["phase", "category", "description", "pod_owner", "descriptor"],
                  "properties": {
                    "phase": { "type": "string" },
                    "category": { "type": "string" },
                    "description": { "type": "string" },
                    "pod_owner": { "type": "string" },
                    "inputs": { "type": "array", "items": { "type": "string" } },
                    "outputs": { "type": "array", "items": { "type": "string" } },
                    "descriptor": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns newly created task metadata and updated task list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "new_task_id": { "type": "string" },
                      "new_task_metadata": { "type": "object" },
                      "updated_tasks": { "type": "object" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/memory/index": {
        "post": {
          "operationId": "indexMemory",
          "summary": "Index files into memory.yaml and auto-generate metadata",
          "tags": ["Memory"],
          "x-gpt-action": {
            "name": "Index Memory Files",
            "instructions": "Call this to scan base_paths for new files and add them to memory.yaml with GPT-generated descriptions and tags."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "base_paths": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Optional list of base folders to scan for files"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success message with item count",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/memory/diff": {
        "post": {
          "operationId": "memoryDiff",
          "summary": "Detect missing files in memory.yaml compared to GitHub repo",
          "tags": ["Memory"],
          "x-gpt-action": {
            "name": "Diff Memory Files",
            "instructions": "Use this to find files that are in memory.yaml but not in the GitHub repo."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "base_paths"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "base_paths": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "List of missing files",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "missing_files": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/memory/add": {
        "post": {
          "operationId": "addToMemory",
          "summary": "Add files to memory.yaml with auto-generated metadata",
          "tags": ["Memory"],
          "x-gpt-action": {
            "name": "Add Files to Memory",
            "instructions": "Provide a list of file paths. The system will auto-generate descriptions, tags, and pod owner using GPT."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "files"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["path"],
                        "properties": {
                          "path": { "type": "string" },
                          "description": {
                            "type": "string",
                            "description": "(Optional) Will be overwritten by GPT"
                          },
                          "tags": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "(Optional) Will be overwritten by GPT"
                          },
                          "pod_owner": {
                            "type": "string",
                            "description": "(Optional) Will be overwritten by GPT"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "New memory entries added",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "memory_index": {
                        "type": "array",
                        "items": { "type": "object" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/memory/validate-files": {
        "post": {
          "operationId": "validateMemoryFileExists",
          "summary": "Validate that files exist in memory.yaml and GitHub",
          "tags": ["Memory"],
          "x-gpt-action": {
            "name": "Validate Memory Files",
            "instructions": "Use this to check if files exist in memory.yaml and GitHub."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "files"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "files": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Validation results",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "validated_files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "file_path": { "type": "string" },
                            "exists_in_memory": { "type": "boolean" },
                            "exists_in_github": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/memory/search": {
        "post": {
          "operationId": "searchMemory",
          "summary": "Search memory.yaml for keyword matches in path, description, or tags",
          "tags": ["Memory"],
          "x-gpt-action": {
            "name": "Search Memory by Keyword",
            "instructions": "Use this to find relevant memory files based on a keyword or phrase."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "keyword"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "keyword": {
                      "type": "string",
                      "description": "Keyword to search within memory entry path, tags, and description"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Matching memory entries",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "matches": {
                        "type": "array",
                        "items": { "type": "object" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/actions/list": {
        "get": {
          "operationId": "listAvailableActions",
          "summary": "List available tools and capabilities",
          "description": "Returns a grouped list of actions that the GPT can perform.",
          "tags": ["Utilities"],
          "x-gpt-action": {
            "name": "List Available Actions",
            "instructions": "Retrieve a list of actions categorized by their functionality."
          },
          "responses": {
            "200": {
              "description": "List of available actions grouped by category",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "category": { "type": "string" },
                            "actions": {
                              "type": "array",
                              "items": { "type": "string" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/metrics/summary": {
        "post": {
          "operationId": "getMetricsSummary",
          "summary": "Fetch the current project delivery and reasoning metrics summary",
          "tags": ["Metrics"],
          "x-gpt-action": {
            "name": "Get Delivery Metrics Summary",
            "instructions": "Retrieve a summary of delivery and reasoning metrics. Includes completion %, cycle time, and AI thinking insights."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name"],
                  "properties": {
                    "repo_name": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Metrics summary retrieved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "timestamp": "2025-04-30T12:00:00Z",
                    "quantitative": {
                      "total_tasks": 20,
                      "completed_tasks": 15,
                      "completion_rate_percent": 75.0,
                      "average_cycle_time_days": 2.1,
                      "patch_success_rate_percent": null
                    },
                    "qualitative": {
                      "average_thought_quality_score": 4.2,
                      "recall_usage_percent": 65.0,
                      "novelty_rate_percent": 80.0
                    },
                    "reasoning_summary": "Summary of the project’s AI thinking patterns and insights."
                  }
                }
              }
            }
          }
        }
      },
      "/metrics/export": {
        "post": {
          "operationId": "exportReasoningMetrics",
          "summary": "Export raw reasoning_trace.yaml logs across tasks",
          "tags": ["Metrics"],
          "x-gpt-action": {
            "name": "Export Reasoning Logs",
            "instructions": "Export full reasoning_trace logs for all completed tasks in the project."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name"],
                  "properties": {
                    "repo_name": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Consolidated raw reasoning logs",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "entries": {
                        "type": "array",
                        "items": { "type": "object" }
                      },
                      "count": { "type": "integer" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/init_project": {
        "post": {
          "operationId": "initProject",
          "summary": "Initialize a new project in the given repo",
          "tags": ["Project"],
          "x-gpt-action": {
            "name": "Initialize Project",
            "instructions": "Use this to set up a new project in the specified GitHub repository."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["project_name", "repo_name", "project_description"],
                  "properties": {
                    "project_name": { "type": "string" },
                    "repo_name": { "type": "string" },
                    "project_description": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful project initialization",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" }
                    },
                    "required": ["message"]
                  }
                }
              }
            },
            "400": {
              "description": "Framework folder missing"
            }
          }
        }
      },
      "/tasks/start": {
        "post": {
          "operationId": "startTask",
          "summary": "Start a task and mark it in progress",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Start Task",
            "instructions": "Use this to mark a task as in progress and update its status."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["task_id", "repo_name"],
                  "properties": {
                    "task_id": { "type": "string" },
                    "repo_name": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Task started",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "prompt_content": { "type": "string" },
                      "inputs": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "handoff_note": { "type": "object" },
                      "next_step": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/append_chain_of_thought": {
        "post": {
          "operationId": "appendChainOfThought",
          "summary": "Append a message to a task's chain_of_thought.yaml file",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Append to Chain of Thought",
            "instructions": "Use this to append a message to a task's chain_of_thought.yaml file."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "task_id", "message"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "task_id": { "type": "string" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successfully appended chain of thought",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "appended_thought": { "type": "object" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/update_changelog/{task_id}": {
        "post": {
          "operationId": "updateChangelog",
          "summary": "Update project CHANGELOG with a new task entry",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Update Changelog",
            "instructions": "Use this to add a new entry to the project's CHANGELOG file."
          },
          "parameters": [
            {
              "name": "task_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "changelog_message"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "changelog_message": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Changelog updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/tasks/complete": {
        "post": {
          "summary": "Mark task complete and log outputs, trace, and handoff",
          "operationId": "completeTask",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Complete Task",
            "instructions": "Use this to mark a task as complete and log outputs, trace, and handoff."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "task_id"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "task_id": { "type": "string" },
                    "outputs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["path", "content"],
                        "properties": {
                          "path": { "type": "string" },
                          "content": { "type": "string" }
                        }
                      }
                    },
                    "reasoning_trace": {
                      "type": "object",
                      "description": "Structured reasoning trace from the GPT pod for this task",
                      "properties": {
                        "task_id": { "type": "string" },
                        "thoughts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "thought": { "type": "string" },
                              "tags": {
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            }
                          }
                        },
                        "scoring": {
                          "type": "object",
                          "properties": {
                            "thought_quality": { "type": "integer", "minimum": 1, "maximum": 5 },
                            "recall_used": { "type": "boolean" },
                            "novel_insight": { "type": "boolean" }
                          }
                        },
                        "summary": { "type": "string" },
                        "improvement_opportunities": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "alternatives": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "handoff_note": { "type": "object" }
                  },
                  "example": {
                    "repo_name": "nhl-predictor",
                    "task_id": "2.2",
                    "outputs": [
                      {
                        "path": "project/outputs/2.2/summary.md",
                        "content": "All implementation steps are complete."
                      }
                    ],
                    "reasoning_trace": {
                      "task_id": "2.2",
                      "thoughts": [
                        {
                          "thought": "Used prior implementation spec to generate updated plan.",
                          "tags": ["recall_used", "planning"]
                        },
                        {
                          "thought": "Added validation step to reduce future QA workload.",
                          "tags": ["novel_insight", "efficiency"]
                        }
                      ],
                      "scoring": {
                        "thought_quality": 4,
                        "recall_used": true,
                        "novel_insight": true
                      },
                      "summary": "Clear reasoning with useful reuse and small innovation.",
                      "improvement_opportunities": [
                        "Could reference QA criteria directly",
                        "Explain tradeoffs of alternate approaches"
                      ],
                      "alternatives": [
                        "Could have used fixed schedule instead of retriggering after updates"
                      ]
                    },
                    "handoff_note": {
                      "timestamp": "2025-04-30T12:00:00Z",
                      "from_pod": "DevPod",
                      "to_pod": "QAPod",
                      "reason": "Code complete, ready for QA",
                      "token_count": 14500,
                      "next_prompt": "Start with test plan for module A",
                      "reference_files": ["src/module_a.py"],
                      "notes": "Some edge cases still need coverage.",
                      "ways_of_working": "Follow async feedback loop via chain_of_thought."
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Task completion confirmed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/next": {
        "post": {
          "operationId": "getNextTask",
          "summary": "Suggest the next task in the queue for the requesting Pod",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Get Next Task",
            "instructions": "Use this to retrieve the next task assigned to the requesting Pod."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "pod_owner"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "pod_owner": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Next available task metadata",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "next_task": { "type": "object" },
                      "message": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/reopen": {
        "post": {
          "operationId": "reopenTask",
          "summary": "Reopen a completed task and mark as in progress",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Reopen Task",
            "instructions": "Use this to reopen a task that was previously marked as complete."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "task_id"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "task_id": { "type": "string" },
                    "reason": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Task reopened and COT updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/append_handoff_note/{task_id}": {
        "post": {
          "summary": "Append a handoff note to a task",
          "operationId": "appendHandoffNote",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Append Handoff Note",
            "instructions": "Use this to append a handoff note to a task's metadata."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "from_pod", "to_pod", "reason", "token_count", "next_prompt"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "from_pod": { "type": "string" },
                    "to_pod": { "type": "string" },
                    "reason": { "type": "string" },
                    "token_count": { "type": "integer" },
                    "next_prompt": { "type": "string" },
                    "reference_files": {
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "notes": { "type": "string" },
                    "ways_of_working": { "type": "string" }
                  },
                  "example": {
                    "repo_name": "nhl-predictor",
                    "from_pod": "DevPod",
                    "to_pod": "QAPod",
                    "reason": "Feature complete, ready for QA",
                    "token_count": 13200,
                    "next_prompt": "Please test component A and validate edge case B",
                    "reference_files": ["src/main.py", "test/test_main.py"],
                    "notes": "Watch out for flakiness in test X",
                    "ways_of_working": "Continue async updates via chain_of_thought.yaml"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Handoff note appended successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "note": { "type": "object" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/fetch_handoff_note": {
        "post": {
          "summary": "Retrieve latest handoff note from upstream task",
          "operationId": "fetchHandoffNote",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Fetch Handoff Note",
            "instructions": "Use this to retrieve the latest handoff note from an upstream task."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "task_id"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "task_id": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Handoff note found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "handoff_from": { "type": "string" },
                      "handoff_note": { "type": "object" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/auto_generate_handoff/{task_id}": {
        "post": {
          "summary": "Auto-generate a handoff note for a completed task",
          "operationId": "autoGenerateHandoff",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Auto-Generate Handoff Note",
            "instructions": "Use this to auto-generate a handoff note for a completed task."
          },
          "parameters": [
            {
              "name": "task_id",
              "in": "path",
              "required": true,
              "schema": { "type": "string" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name"],
                  "properties": {
                    "repo_name": { "type": "string" }
                  },
                  "example": {
                    "repo_name": "nhl-predictor"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Handoff note generated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "handoff_note": { "type": "object" }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "detail": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/tasks/commit_and_log_output": {
        "post": {
          "summary": "Commit and log a single output file for a task",
          "operationId": "commitAndLogOutput",
          "tags": ["Tasks"],
          "x-gpt-action": {
            "name": "Commit and Log Output File",
            "instructions": "Use this to commit and log a single output file for a task."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "task_id", "file_path", "content", "message"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "task_id": { "type": "string" },
                    "file_path": { "type": "string" },
                    "content": { "type": "string" },
                    "message": { "type": "string" },
                    "committed_by": { "type": "string", "default": "GPTPod" }
                  },
                  "example": {
                    "repo_name": "nhl-predictor",
                    "task_id": "2.4_build",
                    "file_path": "project/outputs/2.4_build/spec.yaml",
                    "content": "output file content here...",
                    "message": "Add feature spec",
                    "committed_by": "DevPod"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Output file committed and logged",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/audit/validate_changelog": {
        "post": {
          "summary": "Validate and optionally backfill changelog entries for completed tasks",
          "operationId": "validateChangelog",
          "tags": ["Audit"],
          "x-gpt-action": {
            "name": "Validate Changelog Entries",
            "instructions": "Use this to validate and optionally backfill changelog entries for completed tasks."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "dry_run": { "type": "boolean", "default": false }
                  },
                  "example": {
                    "repo_name": "nhl-predictor",
                    "dry_run": true
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Changelog validation result",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "missing_changelog_entries": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "task_id": { "type": "string" },
                            "path": { "type": "string" }
                          }
                        }
                      },
                      "total_missing": { "type": "integer" },
                      "message": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/git/rollback_commit": {
        "post": {
          "operationId": "rollbackCommit",
          "summary": "Rollback specific files to previous commit",
          "tags": ["Git"],
          "x-gpt-action": {
            "name": "Rollback Commit",
            "instructions": "Use this to revert files to a previous commit version. Use with caution. Log a reason for rollback."
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["repo_name", "commit_sha"],
                  "properties": {
                    "repo_name": { "type": "string" },
                    "commit_sha": {
                      "type": "string",
                      "description": "The SHA of the commit to rollback from.\n\nHow to find it:\n- Use `git log` locally, or\n- Visit the GitHub repo ➜ Commits tab ➜ Copy the commit hash\n- Or call the `/git/list_commits` tool (if available)"
                    },
                    "paths": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Optional list of file paths to revert. If omitted, all files from the commit will be reverted."
                    },
                    "reason": {
                      "type": "string",
                      "description": "Why the rollback is being performed (e.g., accidental overwrite, failed auto-index, etc.)"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Rollback result",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": { "type": "string" },
                      "reverted_files": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

    }
  }