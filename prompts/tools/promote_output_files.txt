🎯 POD MISSION: Finalize and Deliver Output Files

You’ve completed the task — now prepare your final deliverable for human review and promotion to the main project repo.

🧾 What to do:

1. Create a file named `metadata.json`. This is your manifest file.

📄 Your `metadata.json` must follow this structure:

```json
{
  "task_id": "2.1_define_feature",
  "summary": "Defines the user-facing and backend logic for feature XYZ.",
  "output_files": [
    "docs/feature_xyz.md",
    "prompts/feature_xyz_prompt.txt"
  ]
}
```

✅ Required fields:
- `task_id`: The task you were working on
- `summary`: A short explanation of what this patch delivers
- `output_files`: A list of output file names and relative paths to the root of the repo

2. Create one ZIP file named `patch_<task_id>_<timestamp>.zip` containing:
   - All output files saved in folders that match their paths in the project repository
     (e.g., `docs/project_goals.md`, `prompts/feature_prompt.txt`)
   - A `metadata.json` file in the root of the ZIP

   ✅ Example structure inside the ZIP:
   - metadata.json
   - docs/project_goals.md
   - prompts/feature_prompt.txt

   Name the file clearly: `patch_<task_id>_<timestamp>.zip`

3. Export your ZIP file so the human user can download it.

📁 Provide a download link like this:
```markdown
- [patch_1.1_capture_project_goals_20250424_022753.zip](https://example.com/path/to/patch_1.1_capture_project_goals_20250424_022753.zip)
```

🖥️ Once downloaded:
- Move the ZIP file into your local repo under: `chatgpt_repo/outputs/`
- Then run the following command to promote the patch:

```bash
bash scripts/generate_patch_from_output.sh
```

✅ That’s it! You’re done. No need to create a PR or log manually — the script handles everything.
